import requests
import asyncio
from dotenv import load_dotenv
from langchain_community.utilities.dalle_image_generator import DallEAPIWrapper
import os

# Carga las variables de entorno desde el archivo .env
load_dotenv(dotenv_path="/Users/lucascapdevila/LANGGRAPH-MCP-AGENT/.env")
print("OPENAI_API_KEY cargada correctamente" if os.getenv('OPENAI_API_KEY') else "OPENAI_API_KEY no encontrada")

async def run_agent():
    """Run a simplified Story IP Creator agent."""
    print("\n=== Story IP Creator ===")
    print(
        "This tool will help you create and mint an image as an IP asset in the Story ecosystem.\n"
    )

    # Get user input for image generation
    image_prompt = input(
        "What image would you like to create? (e.g., 'an anime style image of a person snowboarding'): "
    )

    print(f'"{image_prompt}"')
    print("\nStarting the creation process...\n")

    # Step 1: Generate the image using DALL-E
    print("Generating image with DALL-E...")
    dalle = DallEAPIWrapper()
    image_url = dalle.run(image_prompt)
    print(f"Image generated: {image_url}")

    # Step 2: Upload the image to IPFS
    print("Uploading image to IPFS...")
    response = requests.post(
        "http://127.0.0.1:8000/upload_image_to_ipfs",
        json={"image_data": image_url}
    )
    if response.status_code != 200:
        print(f"Error uploading to IPFS: {response.json()}")
        return
    ipfs_uri = response.json().get("ipfs_uri")
    print(f"Image uploaded to IPFS: {ipfs_uri}")

    # Step 3: Create IP metadata
    print("Creating IP metadata...")
    metadata_response = requests.post(
        "http://127.0.0.1:8000/create_ip_metadata",
        json={
            "image_uri": ipfs_uri,
            "name": "Futuristic Cityscape",
            "description": "A futuristic cityscape generated by DALL-E",
            "attributes": []
        }
    )
    if metadata_response.status_code != 200:
        print(f"Error creating metadata: {metadata_response.json()}")
        return
    registration_metadata = metadata_response.json().get("registration_metadata")
    print(f"Metadata created: {registration_metadata}")

    # Step 4: Mint and register IP with terms
    print("Minting and registering IP asset...")
    mint_payload = {
        "commercial_rev_share": 20,
        "derivatives_allowed": True,
        "registration_metadata": registration_metadata
    }
    print(f"Sending mint request with payload: {mint_payload}")
    mint_response = requests.post(
        "http://127.0.0.1:8000/mint_and_register_ip_with_terms",
        json=mint_payload
    )
    print(f"Mint response status: {mint_response.status_code}")
    print(f"Mint response body: {mint_response.json()}")
    if mint_response.status_code != 200:
        print(f"Error minting IP: {mint_response.json()}")
        return
    mint_data = mint_response.json()
    ip_id = mint_data.get("ip_id")
    license_terms_ids = mint_data.get("license_terms_ids")
    if not ip_id or not license_terms_ids:
        print(f"Error: Mint response missing required fields - ip_id: {ip_id}, license_terms_ids: {license_terms_ids}")
        return
    print(f"IP Asset minted: {ip_id}, License Terms IDs: {license_terms_ids}")

    # Step 5: Mint license tokens
    print("Minting license tokens...")
    license_payload = {
        "licensor_ip_id": ip_id,
        "license_terms_id": license_terms_ids[0]
    }
    license_response = requests.post(
        "http://127.0.0.1:8000/mint_license_tokens",
        json=license_payload
    )
    print(f"License response status: {license_response.status_code}")
    print(f"License response body: {license_response.json()}")
    if license_response.status_code != 200:
        print(f"Error minting license tokens: {license_response.json()}")
        return
    license_token_ids = license_response.json().get("license_token_ids")
    print(f"License tokens minted: {license_token_ids}")

    print("\n=== Process Complete ===")
    print("Your IP has been successfully created and registered with Story!")
    print("Thank you for using the Story IP Creation Agent.")

if __name__ == "__main__":
    asyncio.run(run_agent())